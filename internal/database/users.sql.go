// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addChirpyRed = `-- name: AddChirpyRed :exec
UPDATE users
SET is_chirpy_red = true
WHERE users.id = $1
`

func (q *Queries) AddChirpyRed(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, addChirpyRed, id)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES(
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type CreateUserParams struct {
	ID             uuid.UUID
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
	Email          string
	HashedPassword sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Email,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const findUserEmail = `-- name: FindUserEmail :one
SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red FROM users
WHERE email = $1
`

func (q *Queries) FindUserEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const updatePassEmail = `-- name: UpdatePassEmail :exec
UPDATE users
SET email = $2, hashed_password = $3
WHERE users.id = $1
`

type UpdatePassEmailParams struct {
	ID             uuid.UUID
	Email          string
	HashedPassword sql.NullString
}

func (q *Queries) UpdatePassEmail(ctx context.Context, arg UpdatePassEmailParams) error {
	_, err := q.db.ExecContext(ctx, updatePassEmail, arg.ID, arg.Email, arg.HashedPassword)
	return err
}
